/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace TodoList {
  export type TaskStruct = {
    id: BytesLike;
    owner: AddressLike;
    isCompleted: boolean;
    createdAt: BigNumberish;
    completedAt: BigNumberish;
    isDeleted: boolean;
  };

  export type TaskStructOutput = [
    id: string,
    owner: string,
    isCompleted: boolean,
    createdAt: bigint,
    completedAt: bigint,
    isDeleted: boolean
  ] & {
    id: string;
    owner: string;
    isCompleted: boolean;
    createdAt: bigint;
    completedAt: bigint;
    isDeleted: boolean;
  };
}

export interface TodoListInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "completeTask"
      | "createTask"
      | "deleteTask"
      | "getFilteredTasks"
      | "getTask"
      | "owner"
      | "renounceOwnership"
      | "tasks"
      | "transferOwnership"
      | "userTasks"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "TaskCompleted"
      | "TaskCreated"
      | "TaskDeleted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "completeTask",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createTask",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteTask",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFilteredTasks",
    values: [AddressLike, boolean, boolean]
  ): string;
  encodeFunctionData(functionFragment: "getTask", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tasks", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userTasks",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "completeTask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createTask", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deleteTask", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFilteredTasks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTask", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tasks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userTasks", data: BytesLike): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TaskCompletedEvent {
  export type InputTuple = [id: BytesLike, timestamp: BigNumberish];
  export type OutputTuple = [id: string, timestamp: bigint];
  export interface OutputObject {
    id: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TaskCreatedEvent {
  export type InputTuple = [
    id: BytesLike,
    owner: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [id: string, owner: string, timestamp: bigint];
  export interface OutputObject {
    id: string;
    owner: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TaskDeletedEvent {
  export type InputTuple = [id: BytesLike, timestamp: BigNumberish];
  export type OutputTuple = [id: string, timestamp: bigint];
  export interface OutputObject {
    id: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TodoList extends BaseContract {
  connect(runner?: ContractRunner | null): TodoList;
  waitForDeployment(): Promise<this>;

  interface: TodoListInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  completeTask: TypedContractMethod<[_taskId: BytesLike], [void], "nonpayable">;

  createTask: TypedContractMethod<[_taskId: BytesLike], [void], "nonpayable">;

  deleteTask: TypedContractMethod<[_taskId: BytesLike], [void], "nonpayable">;

  getFilteredTasks: TypedContractMethod<
    [_user: AddressLike, includeCompleted: boolean, includeDeleted: boolean],
    [string[]],
    "view"
  >;

  getTask: TypedContractMethod<
    [_taskId: BytesLike],
    [TodoList.TaskStructOutput],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  tasks: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, boolean, bigint, bigint, boolean] & {
        id: string;
        owner: string;
        isCompleted: boolean;
        createdAt: bigint;
        completedAt: bigint;
        isDeleted: boolean;
      }
    ],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  userTasks: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "completeTask"
  ): TypedContractMethod<[_taskId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createTask"
  ): TypedContractMethod<[_taskId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deleteTask"
  ): TypedContractMethod<[_taskId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getFilteredTasks"
  ): TypedContractMethod<
    [_user: AddressLike, includeCompleted: boolean, includeDeleted: boolean],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTask"
  ): TypedContractMethod<
    [_taskId: BytesLike],
    [TodoList.TaskStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "tasks"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, boolean, bigint, bigint, boolean] & {
        id: string;
        owner: string;
        isCompleted: boolean;
        createdAt: bigint;
        completedAt: bigint;
        isDeleted: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userTasks"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "TaskCompleted"
  ): TypedContractEvent<
    TaskCompletedEvent.InputTuple,
    TaskCompletedEvent.OutputTuple,
    TaskCompletedEvent.OutputObject
  >;
  getEvent(
    key: "TaskCreated"
  ): TypedContractEvent<
    TaskCreatedEvent.InputTuple,
    TaskCreatedEvent.OutputTuple,
    TaskCreatedEvent.OutputObject
  >;
  getEvent(
    key: "TaskDeleted"
  ): TypedContractEvent<
    TaskDeletedEvent.InputTuple,
    TaskDeletedEvent.OutputTuple,
    TaskDeletedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "TaskCompleted(bytes32,uint256)": TypedContractEvent<
      TaskCompletedEvent.InputTuple,
      TaskCompletedEvent.OutputTuple,
      TaskCompletedEvent.OutputObject
    >;
    TaskCompleted: TypedContractEvent<
      TaskCompletedEvent.InputTuple,
      TaskCompletedEvent.OutputTuple,
      TaskCompletedEvent.OutputObject
    >;

    "TaskCreated(bytes32,address,uint256)": TypedContractEvent<
      TaskCreatedEvent.InputTuple,
      TaskCreatedEvent.OutputTuple,
      TaskCreatedEvent.OutputObject
    >;
    TaskCreated: TypedContractEvent<
      TaskCreatedEvent.InputTuple,
      TaskCreatedEvent.OutputTuple,
      TaskCreatedEvent.OutputObject
    >;

    "TaskDeleted(bytes32,uint256)": TypedContractEvent<
      TaskDeletedEvent.InputTuple,
      TaskDeletedEvent.OutputTuple,
      TaskDeletedEvent.OutputObject
    >;
    TaskDeleted: TypedContractEvent<
      TaskDeletedEvent.InputTuple,
      TaskDeletedEvent.OutputTuple,
      TaskDeletedEvent.OutputObject
    >;
  };
}
